# XPEG - Parsing Expression Grammars (PEG) adapted
# 
# Author: Helton Carlos de Souza <helton.development@gmail.com>
#
# Useful links:
#   - PEG specification        <http://www.brynosaurus.com/pub/lang/peg.pdf>
#   - Parsimonious (in Python) <https://github.com/erikrose/parsimonious>
#   - Citrus (in Ruby)         <https://github.com/mjijackson/citrus>
#   - Parselet (in Ruby)       <https://github.com/kschiess/parslet>

# Rules
<rules>                    = rule+
<rule>                     = rule_identifier assignment expression actions?
<expression>               = sequence ("|" sequence)*
<sequence>                 = prefix*
<prefix>                   = lookahead_assertion? suffix
<suffix>                   = primary quantifier?
<primary>                  = rule_reference 
                           |  parenthesized_expression
                           |  literal
                           |  regex
<parenthesized_expression> = "(" expression ")"
<rule_reference>           = identifier
<actions>                  = skip_action

# Implicit tokens
<assignment>          = "="
<rule_identifier>     = ~"<[a-z_][a-z0-9_]*>"i
<skip_action>         = ~"[skip]"i
<regex>               = ~"~u?r?\".*?[^\\]\"[ilmsux]*"is
<literal>             = ~"u?r?\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\""is
<identifier>          = ~"[a-z_][a-z0-9_]*"i
<lookahead_assertion> = ~"[&!]"
<quantifier>          = ~"[?*+]|{[0-9]+(\s*,\s*([0-9]+)?)?}"
<comment>             = ~"#[^\r\n]*" [skip]
<spaces>              = ~"(?:\t|\s|\n)+" [skip]

# To do.: 
#   - Add multiple repetition (like regex, vide Citrus) and actions (like "to_integer" function)
#   - Add multiline comment option